cmake_minimum_required(VERSION 3.13.4)

project(iss_picorisc LANGUAGES C)
set(CMAKE_C_STANDARD 17 CACHE STRING "C standard to conform to")

macro(set_alternate_compiler compiler)
  find_program(COMPILER_EXECUTABLE ${compiler} ${compiler})
  if (COMPILER_EXECUTABLE)
    message(STATUS "Found alternate compiler ${compiler} at ${COMPILER_EXECUTABLE}")
    set(CMAKE_C_COMPILER ${COMPILER_EXECUTABLE})
  else()
    message(STATUS "Failed to find alternate compiler ${compiler}")
    set(USE_ALTERNATE_COMPILE	R "" CACHE STRING "Use alternate compiler" FORCE)
  endif()
endmacro()

set(USE_ALTERNATE_COMPILER "" CACHE STRING "Use alternate compiler. Leave empty for system default")
if(NOT "${USE_ALTERNATE_COMPILER}" STREQUAL "")
  set_alternate_compiler("${USE_ALTERNATE_COMPILER}")
endif()

macro(set_alternate_linker linker)
  find_program(LINKER_EXECUTABLE ${linker} ${linker})
  if(LINKER_EXECUTABLE)
    message(STATUS "Found alternate linker ${linker} at ${LINKER_EXECUTABLE}")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND "${CMAKE_CXX_COMPILER_VERSION}" VERSION_LESS 12.0.0)
      add_link_options("-ld-path=${USE_ALTERNATE_LINKER}")
    else()
      add_link_options("--ld-path=${USE_ALTERNATE_LINKER}")
    endif()
  else()
    message(STATUS "Failed to find alternate linker ${linker}")
    set(USE_ALTERNATE_LINKER "" CACHE STRING "Use alternate linker" FORCE)
  endif()
endmacro()

set(USE_ALTERNATE_LINKER "" CACHE STRING "Use alternate linker. Leave empty for system default; alternatives are 'gold', 'lld', 'bfd' or 'mold'")
if(NOT "${USE_ALTERNATE_LINKER}" STREQUAL "")
  set_alternate_linker("${USE_ALTERNATE_LINKER}")
endif()

file(GLOB C_FILES src/*.c)

foreach(C_FILE ${C_FILES})
	file(READ ${C_FILE} CONTENTS)
	if(NOT CONTENTS MATCHES "int +main *\\(")
		list(APPEND C_SRC_FILES ${C_FILE})
		message(STATUS "Adding ${C_FILE} to source files")
	else()
		list(APPEND C_MAIN_FILES ${C_FILE})
	endif()
endforeach()

set(CMAKE_BUILD_TYPE DEBUG)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")

foreach(C_MAIN ${C_MAIN_FILES})
	get_filename_component(EXEC_NAME ${C_MAIN} NAME_WLE)
	message(STATUS "Adding executable ${EXEC_NAME}")
	add_executable(${EXEC_NAME} ${C_MAIN} ${C_SRC_FILES})
	set_target_properties(${EXEC_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
	install(TARGETS ${EXEC_NAME} DESTINATION bin)
endforeach()

